{"version":3,"sources":["containers/Data/data.js","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["quizBank","hiragana","q","a","katakana","Quiz","state","type","selectedQs","current","value","completed","score","data","inputShow","inputRef","React","createRef","testTypeChoosenHandler","selectedQuestions","sort","Math","random","slice","setState","inputChangeHandler","event","target","inputSubmitHandler","questions","index","length","prev","question","validation","updatedScore","result","push","console","log","closeQuizHandler","this","focus","instruction","className","RenderQuestion","RenderResult","autoFocus","onChange","ref","onKeyPress","key","onClick","map","obj","e","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uSAAaA,G,MAAW,CACpBC,SAAU,CACN,CACIC,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,OAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,OAEP,CACID,EAAG,SACHC,EAAG,OAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,OAGXC,SAAU,CACN,CACIF,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,OAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,OAEP,CACID,EAAG,SACHC,EAAG,OAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,KAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG,MAEP,CACID,EAAG,SACHC,EAAG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","file":"static/js/main.5c926374.chunk.js","sourcesContent":["export const quizBank = {\n    hiragana: [\n        {\n            q: 'あ',\n            a: 'a',\n        },\n        {\n            q: 'い',\n            a: 'i'\n        },\n        {\n            q: 'う',\n            a: 'u'\n        },\n        {\n            q: 'え',\n            a: 'e'\n        },\n        {\n            q: 'お',\n            a: 'o'\n        },\n        {\n            q: 'か',\n            a: 'ka'\n        },\n        {\n            q: 'き',\n            a: 'ki'\n        },\n        {\n            q: 'く',\n            a: 'ku'\n        },\n        {\n            q: 'け',\n            a: 'ke'\n        },\n        {\n            q: 'こ',\n            a: 'ko'\n        },\n        {\n            q: 'さ',\n            a: 'sa'\n        },\n        {\n            q: 'し',\n            a: 'shi'\n        },\n        {\n            q: 'す',\n            a: 'su'\n        },\n        {\n            q: 'せ',\n            a: 'se'\n        },\n        {\n            q: 'そ',\n            a: 'so'\n        },\n        {\n            q: 'た',\n            a: 'ta'\n        },\n        {\n            q: 'ち',\n            a: 'chi'\n        },\n        {\n            q: 'つ',\n            a: 'tsu'\n        },\n        {\n            q: 'て',\n            a: 'te'\n        },\n        {\n            q: 'と',\n            a: 'to'\n        },\n        {\n            q: 'な',\n            a: 'na'\n        },\n        {\n            q: 'に',\n            a: 'ni'\n        },\n        {\n            q: 'ぬ',\n            a: 'nu'\n        },\n        {\n            q: 'ね',\n            a: 'ne'\n        },\n        {\n            q: 'の',\n            a: 'no'\n        },\n        {\n            q: 'は',\n            a: 'ha'\n        },\n        {\n            q: 'ひ',\n            a: 'hi'\n        },\n        {\n            q: 'ふ',\n            a: 'hu'\n        },\n        {\n            q: 'へ',\n            a: 'he'\n        },\n        {\n            q: 'ほ',\n            a: 'ho'\n        },\n        {\n            q: 'ま',\n            a: 'ma'\n        },\n        {\n            q: 'み',\n            a: 'mi'\n        },\n        {\n            q: 'む',\n            a: 'mu'\n        },\n        {\n            q: 'め',\n            a: 'me'\n        },\n        {\n            q: 'も',\n            a: 'mo'\n        },\n        {\n            q: 'や',\n            a: 'ya'\n        },\n        {\n            q: 'ゆ',\n            a: 'yu'\n        },\n        {\n            q: 'よ',\n            a: 'yo'\n        },\n        {\n            q: 'ら',\n            a: 'ra'\n        },\n        {\n            q: 'り',\n            a: 'ri'\n        },\n        {\n            q: 'る',\n            a: 'ru'\n        },\n        {\n            q: 'れ',\n            a: 're'\n        },\n        {\n            q: 'ろ',\n            a: 'ro'\n        },\n        {\n            q: 'わ',\n            a: 'wa'\n        },\n        {\n            q: 'を',\n            a: 'o'\n        },\n        {\n            q: 'ん',\n            a: 'n'\n        },\n        {\n            q: 'が',\n            a: 'ga'\n        },\n        {\n            q: 'ぎ',\n            a: 'gi'\n        },\n        {\n            q: 'ぐ',\n            a: 'gu'\n        },\n        {\n            q: 'げ',\n            a: 'ge'\n        },\n        {\n            q: 'ご',\n            a: 'go'\n        },\n        {\n            q: 'ざ',\n            a: 'za'\n        },\n        {\n            q: 'じ',\n            a: 'ji'\n        },\n        {\n            q: 'ず',\n            a: 'zu'\n        },\n        {\n            q: 'ぜ',\n            a: 'ze'\n        },\n        {\n            q: 'ぞ',\n            a: 'zo'\n        },\n        {\n            q: 'だ',\n            a: 'da'\n        },\n        {\n            q: 'ぢ',\n            a: 'ji'\n        },\n        {\n            q: 'づ',\n            a: 'zu'\n        },\n        {\n            q: 'で',\n            a: 'de'\n        },\n        {\n            q: 'ど',\n            a: 'do'\n        },\n        {\n            q: 'ば',\n            a: 'ba'\n        },\n        {\n            q: 'び',\n            a: 'bi'\n        },\n        {\n            q: 'ぶ',\n            a: 'bu'\n        },\n        {\n            q: 'べ',\n            a: 'be'\n        },\n        {\n            q: 'ぼ',\n            a: 'bo'\n        },\n        {\n            q: 'ぱ',\n            a: 'pa'\n        },\n        {\n            q: 'ぴ',\n            a: 'pi'\n        },\n        {\n            q: 'ぷ',\n            a: 'pu'\n        },\n        {\n            q: 'ぺ',\n            a: 'pe'\n        },\n        {\n            q: 'ぽ',\n            a: 'po'\n        }\n    ],\n    katakana: [\n        {\n            q: 'ア',\n            a: 'a'\n        },\n        {\n            q: 'イ',\n            a: 'i'\n        },\n        {\n            q: 'ウ',\n            a: 'u'\n        },\n        {\n            q: 'エ',\n            a: 'e'\n        },\n        {\n            q: 'オ',\n            a: 'o'\n        },\n        {\n            q: 'カ',\n            a: 'ka'\n        },\n        {\n            q: 'キ',\n            a: 'ki'\n        },\n        {\n            q: 'ク',\n            a: 'ku'\n        },\n        {\n            q: 'ケ',\n            a: 'ke'\n        },\n        {\n            q: 'コ',\n            a: 'ko'\n        },\n        {\n            q: 'サ',\n            a: 'sa'\n        },\n        {\n            q: 'シ',\n            a: 'shi'\n        },\n        {\n            q: 'ス',\n            a: 'su'\n        },\n        {\n            q: 'セ',\n            a: 'se'\n        },\n        {\n            q: 'ソ',\n            a: 'so'\n        },\n        {\n            q: 'タ',\n            a: 'ta'\n        },\n        {\n            q: 'チ',\n            a: 'chi'\n        },\n        {\n            q: 'ツ',\n            a: 'tsu'\n        },\n        {\n            q: 'テ',\n            a: 'te'\n        },\n        {\n            q: 'ト',\n            a: 'to'\n        },\n        {\n            q: 'ナ',\n            a: 'na'\n        },\n        {\n            q: 'ニ',\n            a: 'ni'\n        },\n        {\n            q: 'ヌ',\n            a: 'nu'\n        },\n        {\n            q: 'ネ',\n            a: 'ne'\n        },\n        {\n            q: 'ノ',\n            a: 'no'\n        },\n        {\n            q: 'ハ',\n            a: 'ha'\n        },\n        {\n            q: 'ヒ',\n            a: 'hi'\n        },\n        {\n            q: 'フ',\n            a: 'hu'\n        },\n        {\n            q: 'ヘ',\n            a: 'he'\n        },\n        {\n            q: 'ホ',\n            a: 'ho'\n        },\n        {\n            q: 'マ',\n            a: 'ma'\n        },\n        {\n            q: 'ミ',\n            a: 'mi'\n        },\n        {\n            q: 'ム',\n            a: 'mu'\n        },\n        {\n            q: 'メ',\n            a: 'me'\n        },\n        {\n            q: 'モ',\n            a: 'mo'\n        },\n        {\n            q: 'ヤ',\n            a: 'ya'\n        },\n        {\n            q: 'ユ',\n            a: 'yu'\n        },\n        {\n            q: 'ヨ',\n            a: 'yo'\n        },\n        {\n            q: 'ラ',\n            a: 'ra'\n        },\n        {\n            q: 'リ',\n            a: 'ri'\n        },\n        {\n            q: 'ル',\n            a: 'ru'\n        },\n        {\n            q: 'レ',\n            a: 're'\n        },\n        {\n            q: 'ロ',\n            a: 'ro'\n        },\n        {\n            q: 'ワ',\n            a: 'wa'\n        },\n        {\n            q: 'ヲ',\n            a: 'o'\n        },\n        {\n            q: 'ン',\n            a: 'n'\n        },\n        {\n            q: 'ガ',\n            a: 'ga'\n        },\n        {\n            q: 'ギ',\n            a: 'gi'\n        },\n        {\n            q: 'グ',\n            a: 'gu'\n        },\n        {\n            q: 'ゲ',\n            a: 'ge'\n        },\n        {\n            q: 'ゴ',\n            a: 'go'\n        },\n        {\n            q: 'ザ',\n            a: 'za'\n        },\n        {\n            q: 'ジ',\n            a: 'ji'\n        },\n        {\n            q: 'ズ',\n            a: 'zu'\n        },\n        {\n            q: 'ゼ',\n            a: 'ze'\n        },\n        {\n            q: 'ゾ',\n            a: 'zo'\n        },\n        {\n            q: 'ダ',\n            a: 'da'\n        },\n        {\n            q: 'ヂ',\n            a: 'ji'\n        },\n        {\n            q: 'ヅ',\n            a: 'zu'\n        },\n        {\n            q: 'デ',\n            a: 'de'\n        },\n        {\n            q: 'ド',\n            a: 'do'\n        },\n        {\n            q: 'バ',\n            a: 'ba'\n        },\n        {\n            q: 'ビ',\n            a: 'bi'\n        },\n        {\n            q: 'ブ',\n            a: 'bu'\n        },\n        {\n            q: 'ベ',\n            a: 'be'\n        },\n        {\n            q: 'ボ',\n            a: 'bo'\n        },\n        {\n            q: 'パ',\n            a: 'pa'\n        },\n        {\n            q: 'ピ',\n            a: 'pi'\n        },\n        {\n            q: 'プ',\n            a: 'pu'\n        },\n        {\n            q: 'ペ',\n            a: 'pe'\n        },\n        {\n            q: 'ポ',\n            a: 'po'\n        }\n    ]\n};","import React, { Component } from 'react';\nimport './Quiz.css';\nimport { quizBank } from '../Data/data';\n\nclass Quiz extends Component {\n\n    state = {\n        type: null,\n        selectedQs: [],\n        current: 0,\n        value: '',\n        completed: false,\n        score: 0,\n        data: [],\n        inputShow: false\n    }\n\n    inputRef = React.createRef();\n\n    testTypeChoosenHandler = (type) => {\n        //load 10 random questions\n        // Shuffle array\n        let shuffledQuestions = [...quizBank[type]].sort(() => 0.5 - Math.random());\n        let selectedQuestions = shuffledQuestions.slice(0, 10);\n        //change 3 to 10 \n        this.setState({\n            type: type,\n            selectedQs: selectedQuestions,\n            current: 0,\n            value: '',\n            completed: false,\n            score: 0,\n            data: [],\n            inputShow: true\n        })\n\n    }\n\n    inputChangeHandler = (event) => {\n        this.setState({value: event.target.value});\n    }\n\n    inputSubmitHandler = () => {\n        const questions = this.state.selectedQs;\n        const index = questions.length - 1;\n        let state = {};\n\n        this.setState( prev => {\n            const {value, current} = prev;\n            const question = questions[current];\n\n            //if input not empty \n            if(value.length > 0){\n                //check if answer if correct\n                const validation = (value === question.a) ? true : false;\n                let updatedScore = prev.score;\n                if(validation === true){\n                    updatedScore++;\n                }\n                //data for the result output\n                let data = prev.data;\n                let result = {};\n                result.q = question;\n                result.a = value;\n                result.validation = validation;\n\n                data.push(result);\n\n                //check if last question\n                if(prev.current < index){\n                    state = {\n                        current: prev.current + 1,\n                        value: '',\n                        score: updatedScore,\n                        data \n                    }\n                }\n                else {\n                    state = {\n                        completed: true,\n                        score: updatedScore,\n                        inputShow: false,\n                        data\n                    }\n                }\n\n                return state;\n            }\n\n            console.log(\"Empty Input!\");\n        });\n    }\n\n    closeQuizHandler = () => {\n        this.setState({\n            type: null,\n            selectedQs: [],\n            current: 0,\n            value: '',\n            completed: false,\n            score: 0,\n            inputShow: false,\n            data: []\n        })\n    }\n\n    componentDidUpdate(){\n        if(this.state.inputShow){\n            this.inputRef.current.focus();\n        }   \n    }\n    render () {\n        let instruction = <div className=\"Instructions\">\n            <p>Please select Hiragana or Katakana</p></div>;\n        let RenderQuestion = <div></div>;\n        let RenderResult = <div>Loading Results...</div>;\n        if(this.state.type !== null){\n            instruction = <div className=\"Instructions\"> \n                        <p>You selected {this.state.type}! You will be quizzed on 10 randomly selected {this.state.type}s!</p>\n                        <p>Answer the quiz by typing in the romanji of the displayed {this.state.type} then clicking Submit!</p>\n                        </div>;\n            const questions = this.state.selectedQs;\n            let question = questions[this.state.current];\n            RenderQuestion = <div className='QuizInterface'>\n                                <h2 className='Question'>{question.q}</h2>\n                                <input autoFocus type=\"text\" className='answerInput' \n                                value={this.state.value} \n                                onChange={this.inputChangeHandler} \n                                ref= {this.inputRef}\n                                onKeyPress={event => {\n                                    if (event.key === 'Enter') {\n                                      this.inputSubmitHandler();\n                                    }\n                                  }}/>\n                                <button type=\"submit\" className='submitButton' onClick={this.inputSubmitHandler}\n                                >Submit</button>\n                            </div>;\n\n            if(this.state.completed){\n                let result = this.state.data.map(obj => {\n                    return <p>\n                        {obj.q.q}   {obj.a}   {obj.validation ? '✓' : '✗'}\n                    </p>\n                })\n                RenderResult = <div className='Result'>\n                            <h3>You scored {this.state.score}/10!</h3>\n                            <p>Your Result</p>\n                            {result}\n                            <button className='closeButton' onClick={this.closeQuizHandler}>Close</button>\n                            </div>   \n            }\n        }\n        \n        return (\n            <div className='Quiz'>\n                <div className='Button'>\n                    <button value='hiragana'\n                    className={this.state.type === 'hiragana' ? \"active\" : \" \"} \n                        onClick={e => this.testTypeChoosenHandler(e.target.value)}>\n                        Test My Hiragana</button>\n                    <button value='katakana' \n                        className={this.state.type === 'katakana' ? \"active\" : \" \"}\n                        onClick={e => this.testTypeChoosenHandler(e.target.value)}>\n                        Test My Katakana</button>\n                </div>\n                \n                {instruction}\n                {\n                    this.state.completed ? \n                    RenderResult : RenderQuestion\n                }           \n            </div>\n            \n        );\n    }\n};\n\nexport default Quiz;","import React from 'react';\nimport './App.css';\nimport Quiz from './containers/Quiz/Quiz';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}